var model = function() {
  var x = sample(Gaussian({mu: 1, sigma: 1}), {guide() {
    var mu = param({name: 'mu'});
    //display(mu);
    mu.print();
    return Gaussian({mu, sigma: 1});
  }, reparam: false});
  return x;
};

var model2 = function() {
  var x = sample(TensorGaussian({mu: 1, sigma: 1, dims: [1]}), {guide() {
    var mu = param({name: 'mu'});
    mu.print();
    return TensorGaussian({mu, sigma: 1, dims: [1]});
  }, reparam: false});
  return x;
};

var model3 = function() {
  var mu0 = tf.tensor([0.5, 1.0, 10.0]);
  var x = sample(DiagCovGaussian({mu: mu0, sigma: ones([3])}), {guide() {
    var mu = param({name: 'mu', dims: [3]});
    mu.print();
    return DiagCovGaussian({mu, sigma: ones([3])});
  }, reparam: false});
  return x;
};

var model4 = function() {
  var mu = sample(Gaussian({mu: 0, sigma: 2}), {guide() {
    var mu_param = param({name: 'mu_param'});
    var sigma_param = Math.exp(param({name: 'sigma_param'}));
    mu_param.print();
    sigma_param.print();
    console.log('--------------------');
    return Gaussian({mu: mu_param, sigma: sigma_param});
  }, reparam: true});
  factor(Gaussian({mu: mu, sigma: 1}).score(5.5));
  factor(Gaussian({mu: mu, sigma: 1}).score(6.5));
  return mu;
};
// {
//   "mean": 5.333333,
//   "std": 0.666667
// }


tf.zeros([2,2]); // force tf.js to do its init (this appears to take ~0.1s
console.time('opt');

Optimize({model: model4,
          steps: 10000,
          estimator: {ELBO: {avgBaselines: false}},
          checkGradients: false,
          optMethod: {adam: {stepSize: 0.01}}
         });

console.timeEnd('opt');

// this reliably returns an optimized parameter value of close to 1
getParams().mu_param.print();
getParams().sigma_param.print();
